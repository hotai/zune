prog        ::= <stmt>*
stmt        ::= ';' |
                'print' <expr> ';' |
                <assign> ';' |
                <if_stmt>
assign      ::= 'set' <varname> '=' <expr>
if_stmt     ::= 'if' '(' <bool_expr> ')' '{' <stmt>* '}' \
                ['elif' '(' <bool_expr> ')' '{' <stmt>* '}'] \
                ['else' '{' <stmt>* '}']
bool_expr   ::= <comp_expr> ('and' | 'or') <bool_expr> |
                <comp_expr>
comp_expr   ::= <expr> ('>' | '>=' | '<' | '<=' | '==') <expr>
expr        ::= <term> '+' <expr> |
                <term> '-' <expr> |
                <term>
term        ::= <factor> '*' <term> |
                <factor> '/' <term> |
                <factor>
factor      ::= <number> |
                <varname> |
                '+' <factor> |
                '-' <factor> |
                'not' <expr> |
                '(' <expr> ')'
number      ::= [0-9]*[.]?[0-9]*
varname     ::= <alpha>+ <alnum>*
comment     ::= '#' .* '\n' // comment to end of line


**Example**
# Remember to use 'set' every time you assign to a variable,
# even if it was already declared earlier
print (1-4) * -4; # single-line comment
set x = 7 * 5 + -10;
set y = 9;
set z = 4;
print y * 2 + z;
print x;
set a = 3*2;
print z - 10;
print a;
set z = -(67 - z);
print z;
set x = 10;
set x = 10;
set x = 3 + 15 - 8 + 0;
if (3 > 1) {print -x+3; print 2;}
elif (x-2 > 0) {print -x; print 3*x+3;}
else {print 5;}
